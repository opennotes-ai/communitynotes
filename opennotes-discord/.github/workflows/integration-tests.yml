name: Integration Tests

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js version to use'
        required: false
        default: '18.x'
        type: choice
        options:
          - '18.x'
          - '20.x'

  schedule:
    - cron: '0 2 * * *'

  pull_request:
    types: [labeled, synchronize, reopened]

jobs:
  check-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      should_run: ${{ steps.check.outputs.labeled }}
    steps:
      - name: Check for integration test label
        id: check
        run: |
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'run-integration-tests') }}" == "true" ]]; then
            echo "labeled=true" >> $GITHUB_OUTPUT
          else
            echo "labeled=false" >> $GITHUB_OUTPUT
          fi

  integration-tests:
    runs-on: ubuntu-latest
    needs: check-label
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && needs.check-label.outputs.should_run == 'true')

    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: opennotes_discord_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8222/healthz || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 4222:4222
          - 8222:8222

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.node_version || '18.x' }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Prisma
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            node_modules/@prisma/client
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'

          echo "Waiting for Redis..."
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

          echo "Waiting for NATS..."
          timeout 30 bash -c 'until wget --spider -q http://localhost:8222/healthz; do sleep 1; done'

          echo "All services are ready!"

      - name: Setup environment variables
        run: |
          cat << EOF > .env.test
          NODE_ENV=test
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/opennotes_discord_test
          REDIS_URL=redis://localhost:6379/1
          NATS_URL=nats://localhost:4222
          DISCORD_TOKEN=${{ secrets.TEST_DISCORD_TOKEN }}
          DISCORD_CLIENT_ID=${{ secrets.TEST_DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET=${{ secrets.TEST_DISCORD_CLIENT_SECRET }}
          DISCORD_TEST_GUILD_ID=${{ secrets.TEST_GUILD_ID }}
          DISCORD_TEST_USER_ID=${{ secrets.TEST_USER_ID }}
          DISCORD_TEST_CHANNEL_ID=${{ secrets.TEST_CHANNEL_ID }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
          EMAIL_USER=test@example.com
          EMAIL_PASS=test_password
          TWILIO_ACCOUNT_SID=test_account_sid
          TWILIO_AUTH_TOKEN=test_auth_token
          TWILIO_PHONE_NUMBER=+1234567890
          LOG_LEVEL=error
          API_PORT=3001
          EOF

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/opennotes_discord_test

      - name: Run database migrations
        run: npx prisma db push --skip-generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/opennotes_discord_test

      - name: Verify database schema
        run: |
          npx prisma db execute --stdin <<EOF
          SELECT table_name
          FROM information_schema.tables
          WHERE table_schema = 'public';
          EOF
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/opennotes_discord_test

      - name: Run integration tests
        id: integration-tests
        run: npm run test:integration:verbose
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/opennotes_discord_test
          REDIS_URL: redis://localhost:6379/1
          NATS_URL: nats://localhost:4222
          DISCORD_TOKEN: ${{ secrets.TEST_DISCORD_TOKEN }}
          DISCORD_CLIENT_ID: ${{ secrets.TEST_DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET: ${{ secrets.TEST_DISCORD_CLIENT_SECRET }}
          DISCORD_TEST_GUILD_ID: ${{ secrets.TEST_GUILD_ID }}
          DISCORD_TEST_USER_ID: ${{ secrets.TEST_USER_ID }}
          DISCORD_TEST_CHANNEL_ID: ${{ secrets.TEST_CHANNEL_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            coverage/
            logs/
            reports/
          retention-days: 30

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage-report
          path: coverage/
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.integration-tests.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "**Node Version:** ${{ github.event.inputs.node_version || '18.x' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f coverage/lcov-report/index.html ]; then
            echo "**Coverage report generated** - see artifacts" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const body = `## Integration Tests Failed

            The integration tests have failed for this PR. Please review the test results in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).

            **Node Version:** ${{ github.event.inputs.node_version || '18.x' }}
            **Commit:** ${{ github.sha }}

            Please fix the failing tests before merging.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: body
            });

  notify-failure:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: failure() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Send notification
        run: |
          echo "Integration tests failed!"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
